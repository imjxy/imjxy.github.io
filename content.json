{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"【博客搭建】从零开始的博客搭建","text":"本博客网站是基于B站up主codesheep的视频BV1Yb411a7ty一步步建立的，讲的很详细。作为第一篇文章，记录一下搭建博客的过程。 环境配置Node.js 首先下载node.s，我们搭建博客用到的hexo需要node.s。前往官网下载。 安装好后在控制台输入以下代码检测Node.js和npm的版本 1234node -v v12.16.3npm -v 6.14.4 安装cnpm（从淘宝镜像安装，若有vpn可直接安装）npm install -g cnpm --registry=http://registry.npm.taobao.org 用cnpm安装hexo框架cnpm install -g hexo-cli git 前往官网下载 搭建本地网站 创建一个新文件夹，作为存放博客的目录，如D:\\Blog 在控制台进入文件夹内并初始化cd D:\\Bloghexo init 启动本地网站1234hexo sINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 可以复制http://localhost:4000到浏览器查看初始博客网站，用的是默认主题，并且有一篇helloworld的博客。 部署到github 在github上新建仓库，命名为你的用户名.github.io，如imjxy.github.io 在博客文件夹下安装git部署插件cnpm install --save hexo-deployer-git 设置配置文件_config.yml(win可用记事本或写字板打开）在#Deployment下修改12345## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/imjxy/imjxy.github.io.git branch: master repo后跟刚才新建的仓库地址 注:以上每一项：后都要空一格 部署到githubhexo d输入github账号密码，部署成功后就可以用github用户名.github.io来访问了。 hexo常用指令 hexo s 启动本地网站（修改网站或者写完一篇博客后可用此方法在本地看看效果） hexo g 生成静态文件 hexo d 部署网站","link":"/2020/05/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"图片转base64小工具","text":"最近需要学习python制作可视化程序的东西，看了一些教程选择了pysider2来学习。由于之前makedown文档总是上传不了图片，所以搜了搜发现可以用base64转码工具把图片转成一段字符串，然后把字符串填到基础格式中链接的那个位置，于是想顺便练习一下做一个小工具。 UI设计我用的是Qt的界面生成器Qt Designer，拖拖拽拽就可以直观的创建出程序大体的界面 12345class Transfer: def __init__(self): self.ui = QUiLoader().load('base64_turn.ui') self.ui.btn_select.clicked.connect(self.open) self.ui.btn_start.clicked.connect(self.transfer) 通过上述代码实现ui文件的加载与方法的绑定 功能设计文件读取123456789101112131415def open(self): filePath, _ = QFileDialog.getOpenFileName( self.ui, # 父窗口对象 \"选择你要上传的图片\", # 标题 r\"d:\\\\data\", # 起始目录 \"图片类型 (*.png *.jpg *.bmp)\" # 选择类型过滤项，过滤内容在括号中 ) if filePath == None: QMessageBox.information(self, '提示', '文件为空，请重新操作') else: self.pic_path = filePath pic=QtGui.QPixmap(self.pic_path) self.ui.qlb_pic.setPixmap(pic) #self.ui.qlb_pic.resize(pic.width(), pic.height()) self.ui.le_select.setText(self.pic_path) 通过 getExistingDirectory 静态方法 选择目录。该方法，第一个参数是父窗口对象，第二个参数是选择框显示的标题。 如果是选取单个文件，通过 getOpenFileName 静态方法 可以设置提示文本内容，比如 123456filePath, _ = QFileDialog.getOpenFileName( self.ui, # 父窗口对象 \"选择你要上传的图片\", # 标题 r\"d:\\\\data\", # 起始目录 \"图片类型 (*.png *.jpg *.bmp)\" # 选择类型过滤项，过滤内容在括号中 ) 因为该方法返回的是一个元组，第一个元素是选择的文件路径，第二个元素是文件类型，如果你只想获取文件路径即可，可以采用上面的代码写法。 如果用户点击了 选择框的 取消选择按钮，返回 空字符串。 图像转换12345def transfer(self): f = open(self.pic_path, 'rb') # 二进制方式打开图文件 ls_f = base64.b64encode(f.read()) # 读取文件内容，转换为base64编码 f.close() self.ui.tb_base64.setText(str(ls_f)) 记得要import base64 文件已提交至github 第一次给github提交代码，每天进步一点点","link":"/2020/05/06/%E5%9B%BE%E7%89%87%E8%BD%ACbase64%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"title":"基于mobilenetv2的识别demo","text":"依旧是在练习pyside2的使用，这次做了一个图像识别的demo，用的mobilenet来做识别 UI设计UI设计还比较简陋，毕竟现在还只是个demo，而且下午组会就要展示 Qt designer的各种Layout布局还在摸索，这样松松垮垮的实在太丑了，而且我看别人做的程序运行时部分地方有个像C#各种布局的那种框框，哎日后慢慢完善吧 功能设计打开文件1234567891011121314151617181920def open(self): filePath, _ = QFileDialog.getOpenFileName( self.ui, # 父窗口对象 \"选择你要上传的图片\", # 标题 r\"d:\\\\data\", # 起始目录 \"图片类型 (*.png *.jpg *.bmp)\" # 选择类型过滤项，过滤内容在括号中 ) if filePath is None: QMessageBox.information(self, '提示', '文件为空，请重新操作') else: self.pic_path = filePath pic = QtGui.QPixmap(self.pic_path) self.ui.lb_pic1.setPixmap(pic) self.ui.le_select.setText(self.pic_path) time1 = time.perf_counter() s = self.predict(self.pic_path) time2 = time.perf_counter() self.ui.lb_time.setText('识别时间：' + str(time2 - time1) + 's') self.ui.lb_recores.setText('识别结果：' + str(s)) # self.ui.qlb_pic.resize(pic.width(), pic.height()) 这次的open函数相较于上篇博客的稍微复杂一点点，逻辑大概是这样的：打开文件→将原图像显示到第一个label中→调用预测函数，将图片绝对路径传给预测函数→把识别所用时间和识别结果显示到窗口上。 预测123def predict(self, pic_path): str = predict_alter.predict(pic_path) return str 其实就是调用一下预测函数，这里多说几句。 我用的模型是B站UP主霹雳吧啦Wz的教学视频里的，这里是他的GitHub，他讲的深度学习图像分类真的非常详细。 这个predict_alter是我修改了一下原文件，用的是之前训练好的参数。 具体的预测函数我就不粘了。 数据我测试的数据是苹果品种标准叶片图像和光谱数据集，选取了五种苹果叶片的RGB图像 展示 这个里面的经度纬度啊拍摄时间啊，是因为我看到python的exifread库可以读取图像的一些信息（使用Python获取图像的信息)，想测试一下。 那个“选择识别的种类”的多选框是日后准备完善的内容，手里还有fruit、flower的两个数据集，质量都蛮好的 右侧其实放置了四块放图像的label，因为昨天还看到了opencv可以提取图像各通道信息，下午就要组会了，明天在完善吧。","link":"/2020/05/07/%E5%9F%BA%E4%BA%8EMobileNetv2%E7%9A%84%E8%AF%86%E5%88%ABdemo/"},{"title":"【pat】1001（Python format 格式化函数）","text":"艰难的刷题又开始了。 问题描述1001 A+B Format Calculate a+b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits). Input Specification:Each input file contains one test case. Each case contains a pair of integers a and b where −106≤a,b≤106. The numbers are separated by a space. Output Specification:For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format. Sample Input:1-1000000 9 Sample Output:1-999,991 解决方法之前开始过很多次刷题，但是算法和数据结构方面实在是太薄弱了，不管是LeetCode还是pat还是oj都坚持不下去，这次必拿下大概吧 做第一题就充分暴露对语言的不熟悉了，这道题我还跟大一一样试图用乘法和取余取到每三个数然后加”，“ 但其实做除法时例如999001%1000=1而不是001，实在是太笨了 1234567891011121314151617181920def cal_plus(): global rem,res line = input().split(\" \") a, b = int(line[0]), int(line[1]) sum = a + b if (0 &lt; sum &lt; 1000) or (-1000 &lt; sum &lt; 0): #print(sum) return str(sum) else: rem = sum % 1000 sum = int(sum / 1000) res = str(rem) while ((sum &gt; 0 and sum &lt; 1000) or (sum &lt; 0 and sum &lt; -1000)): rem = sum % 1000 sum = int(sum / 1000) res = str(rem) + ',' + res res =str(sum) + ',' + res return res #print(res) 但是我去搜了搜，发现了Python format 格式化函数，其实学python时啃从入门到实践看到过，现在全忘了。 1234def cal(): line = input().split(\" \") a, b = int(line[0]), int(line[1]) print(\"{:,}\".format(a + b)) 几行轻轻松松拿下。 笔记Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。 字符串格式化 format 函数可以接受不限个参数，位置可以不按顺序 12&quot;{} {}&quot;.format(&quot;hello&quot;, &quot;world&quot;) # 不设置指定位置，按默认顺序'hello world' 12&quot;{0} {1}&quot;.format(&quot;hello&quot;, &quot;world&quot;) # 设置指定位置'hello world' 12&quot;{1} {0} {1}&quot;.format(&quot;hello&quot;, &quot;world&quot;) # 设置指定位置'world hello world' 也可以设置参数 123456789print(\"网站名：{name}, 地址 {url}\".format(name=\"菜鸟教程\", url=\"www.runoob.com\")) # 通过字典设置参数site = {\"name\": \"菜鸟教程\", \"url\": \"www.runoob.com\"}print(\"网站名：{name}, 地址 {url}\".format(**site)) # 通过列表索引设置参数my_list = ['菜鸟教程', 'www.runoob.com']print(\"网站名：{0[0]}, 地址 {0[1]}\".format(my_list)) # \"0\" 是必须的 输出结果为： 123网站名：菜鸟教程, 地址 www.runoob.com网站名：菜鸟教程, 地址 www.runoob.com网站名：菜鸟教程, 地址 www.runoob.com 也可以向 str.format() 传入对象 12345class AssignValue(object): def __init__(self, value): self.value = valuemy_value = AssignValue(6)print('value 为: {0.value}'.format(my_value)) # \"0\" 是可选的 输出结果为： 1value 为: 6 数字格式化^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。 + 表示在正数前显示 +，负数前显示 -； （空格）表示在正数前加空格 b、d、o、x 分别是二进制、十进制、八进制、十六进制。 数字 格式 输出 描述 3.1415926 {:.2f} 3.14 保留小数点后两位 3.1415926 {:+.2f} +3.14 带符号保留小数点后两位 -1 {:+.2f} -1.00 带符号保留小数点后两位 2.71828 {:.0f} 3 不带小数 5 {:0&gt;2d} 05 数字补零 (填充左边, 宽度为2) 5 {:x&lt;4d} 5xxx 数字补x (填充右边, 宽度为4) 10 {:x&lt;4d} 10xx 数字补x (填充右边, 宽度为4) 1000000 {:,} 1,000,000 以逗号分隔的数字格式 0.25 {:.2%} 25.00% 百分比格式 1000000000 {:.2e} 1.00e+09 指数记法 13 {:&gt;10d} 13 右对齐 (默认, 宽度为10) 13 {:&lt;10d} 13 左对齐 (宽度为10) 13 {:^10d} 13 中间对齐 (宽度为10) 123456'{:b}'.format(11)'{:d}'.format(11)'{:o}'.format(11)'{:x}'.format(11)'{:#x}'.format(11)'{:#X}'.format(11) 12345610111113b0xb0XB 闲话 这次好好做一个题就总结一下，至少可以坚持下来多学点东西 其实还是蛮想在重新看一下java，这周快点把手里事情了了，尽量这周末看一下","link":"/2020/05/07/%E3%80%90pat%E3%80%911001/"},{"title":"exifread--使用python获取图像信息（一）","text":"填一下坑，上次做那个识别demo提到了exifread来获取图像信息，来实践一下，今天内容不是太多空洞骑士白色宫殿跳跳乐要我狗命 exifread库的下载这个没什么特殊的地方，可以直接在命令提示符中输pip install exifread，或者通过在官网下载第三方库，然后放到本地文件夹里。 如果是在官网下载，下载以后将文件夹中的exifread文件夹放到python文件的lib/site-packages下 测试整个流程比较简单，总的来讲就是通过第三方库得到图像的参数，然后通过遍历或者是说调取的方式拿出你想要的值。 首先以二进制方式读取图像，然后通过exifread.process_file函数得到图像的信息。返回的是一个字典。读取它的keys可以看到它所包含的图像的参数。 首先我们来看一下我使用的测试图片 123456789101112img=open(self.pic_path,\"rb\")imageInfo=exifread.process_file(img)for key in imageInfo: print(key,\":\",imageInfo[key])print(\"**************************\")for item in imageInfo: if item == \"GPS GPSLongitude\": print(\"GPS经度 =\",imageInfo[item],imageInfo['GPS GPSLongitudeRef']) elif item==\"GPS GPSLatitude\": print(\"GPS纬度 =\",imageInfo[item],imageInfo['GPS GPSLatitudeRef']) elif item == \"Image DateTime\": print(\"拍摄时间 =\",imageInfo[item]) 来看看得到的imageInfo字典，我大概翻译了几个，其实意思也很好看懂 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475Image ImageLength : 3840Image Make : HUAWEI#大概是拍摄设备Image Orientation : 0#影像方向，Google直译Image BitsPerSample : [8, 8, 8]#图像位数Image DateTime : 2019:08:12 19:12:13#拍摄时间GPS GPSLatitude : [30, 32, 32]#GPS纬度GPS GPSAltitude : 0GPS GPSLatitudeRef : N（北纬或南纬）GPS GPSAltitudeRef : 1GPS GPSProcessingMethod : GPSGPS GPSVersionID : [2, 2, 0, 0]GPS GPSLongitudeRef : EGPS GPSTimeStamp : [11, 12, 8]GPS GPSLongitude : [114, 21, 7]GPS GPSDate : 2019-08-12Image GPSInfo : 8448Image YResolution : 72Image XResolution : 72Image ImageWidth : 5120Image Model : VCE-AL00Image Software : VCE-AL00 9.1.0.230(C00E230R1P1)Image YCbCrPositioning : CenteredImage ExifOffset : 272Image ResolutionUnit : Pixels/InchThumbnail ImageLength : 384Thumbnail YResolution : 72Thumbnail Compression : JPEG (old-style)Thumbnail JPEGInterchangeFormat : 8813Thumbnail JPEGInterchangeFormatLength : 19571Thumbnail XResolution : 72Thumbnail ImageWidth : 512Thumbnail Orientation : 0Thumbnail ResolutionUnit : Pixels/InchEXIF ExifVersion : 0210EXIF ApertureValue : 169/100EXIF SceneType : Directly PhotographedEXIF SubjectDistanceRange : 0EXIF ExposureBiasValue : 0EXIF ExposureProgram : Program NormalEXIF ColorSpace : sRGBEXIF MaxApertureValue : 169/100EXIF ExifImageLength : 3840EXIF BrightnessValue : 0EXIF DateTimeOriginal : 2019:08:12 19:12:13EXIF FlashPixVersion : 0100EXIF MakerNote : [35, 35, 42, 42, 111, 122, 110, 111, 114, 67, 79, 0]EXIF SubSecTimeOriginal : 159127EXIF WhiteBalance : AutoInteroperability InteroperabilityIndex : R98EXIF InteroperabilityOffset : 8665EXIF CustomRendered : CustomEXIF ExposureMode : Auto ExposureEXIF ExposureTime : 1/50EXIF Flash : Flash did not fireEXIF SubSecTime : 159127EXIF FNumber : 9/5EXIF ISOSpeedRatings : 100EXIF ExifImageWidth : 5120EXIF Saturation : NormalEXIF ComponentsConfiguration : YCbCrEXIF FileSource : Digital CameraEXIF FocalLengthIn35mmFilm : 43EXIF CompressedBitsPerPixel : 19/20EXIF SubSecTimeDigitized : 159127EXIF Contrast : NormalEXIF Sharpness : NormalEXIF DigitalZoomRatio : 1EXIF DateTimeDigitized : 2019:08:12 19:12:13EXIF ShutterSpeedValue : 298973/10000EXIF MeteringMode : PatternEXIF FocalLength : 79/20EXIF GainControl : NoneEXIF SceneCaptureType : StandardEXIF LightSource : DaylightEXIF SensingMethod : One-chip color area 下面是我想输出的内容 123拍摄时间 = 2019:08:12 19:12:13GPS纬度 = [30, 32, 32] NGPS经度 = [114, 21, 7] E exifread库的使用方法还是很简单的 闲话今天打空洞骑士打得有点多，内容比较少，我还看到了调用Exifread模块获取到照片中的经纬度信息，然后再调用高德地图或是百度地图的逆地理编码API，即可得到照片中的地理位置所在，效果如下图所示 明天想来实现一下。","link":"/2020/05/08/exifread-%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF/"},{"title":"exifread--使用python获取图像信息（二）","text":"今天进一步完善了一下，实现了调用百度地图API根据exifread获取的GPS信息查询具体地址 UI设计 功能设计打开文件12345678910111213141516def open(self): filePath, _ = QFileDialog.getOpenFileName( self.ui, # 父窗口对象 \"选择你要上传的图片\", # 标题 r\"d:\\\\data\", # 起始目录 \"图片类型 (*.png *.jpg *.bmp)\" # 选择类型过滤项，过滤内容在括号中 ) if filePath is None: QMessageBox.information(self, '提示', '文件为空，请重新操作') else: self.pic_path = filePath self.ui.le_select.setText(str(filePath)) Info = self.GetInfo(self.pic_path) address = self.GetLocation(Info) Info['地址'] = address self.show(filePath, Info) 打开文件的函数依旧跟前几次的相类似，这次尽量精简了一些，把一些流程写成了函数来调用 获取图像信息1234567891011121314151617def GetInfo(self, path): f = open(path, 'rb') tags = exifread.process_file(f) #print(tags) info = { 'Image DateTime(拍摄时间)': tags.get('Image DateTime', '0').values, 'GPS GPSLatitudeRef(纬度标志)': tags.get('GPS GPSLatitudeRef', '0').values, 'GPS GPSLatitude(纬度)': tags.get('GPS GPSLatitude', '0').values, 'GPS GPSLongitudeRef(经度标志)': tags.get('GPS GPSLongitudeRef', '0').values, 'GPS GPSLongitude(经度)': tags.get('GPS GPSLongitude', '0').values } lat = self.process_num(info.get('GPS GPSLatitude(纬度)')) lng = self.process_num(info.get('GPS GPSLongitude(经度)')) info['GPS GPSLatitude(纬度)'] = lat info['GPS GPSLongitude(经度)'] = lng return info 这里把感兴趣的东西从全部图像信息中挑了出来，形成一个新的字典，再把经纬度转换成常见的数字格式，便于查看也便于后面的查询操作。 经纬度转化12345678def process_num(self, GPSlist): # 处理列表中最后一个元素 GPSlist_last = eval(str(GPSlist[-1])) # 转化 new_GPSlist = GPSlist[0].num + GPSlist[1].num / 60 + GPSlist_last / 3600 return '{:.4f}'.format(new_GPSlist) 原始数据中经纬度的格式是这样的： 12GPS GPSLatitude : [30, 32, 32]GPS GPSLongitude : [114, 21, 7] 而调用百度API时需要我们常见的那种数字化的格式，计算方法如上面代码所示 这里我为了显示起来好看，经纬度只取到了四位。 查询地址1234567891011def GetLocation(self, info): lat = info['GPS GPSLatitude(纬度)'] lng = info['GPS GPSLongitude(经度)'] url = \"http://api.map.baidu.com/reverse_geocoding/v3/?ak=你申请的百度地图API的秘钥&amp;output=json&amp;coordtype=wgs84ll&amp;language_auto=1&amp;extensions_town=true&amp;location=\" + lat + \",\" + lng req = urllib.request.urlopen(url) res = req.read().decode(\"utf-8\") print(res) str1 = json.loads(res) jsonResult = str1.get('result') formatted_address = jsonResult.get('formatted_address') return formatted_address 这里需要自己去申请一个百度地图API的项目，很简单也完全免费。 这里会返回一个json格式的数据： 1{&quot;status&quot;:0,&quot;result&quot;:{&quot;location&quot;:{&quot;lng&quot;:114.36382716144719,&quot;lat&quot;:30.546202080533587},&quot;formatted_address&quot;:&quot;湖北省武汉市武昌区茶港路&quot;,&quot;business&quot;:&quot;水果湖,街道口,武珞路&quot;,&quot;addressComponent&quot;:{&quot;country&quot;:&quot;中国&quot;,&quot;country_code&quot;:0,&quot;country_code_iso&quot;:&quot;CHN&quot;,&quot;country_code_iso2&quot;:&quot;CN&quot;,&quot;province&quot;:&quot;湖北省&quot;,&quot;city&quot;:&quot;武汉市&quot;,&quot;city_level&quot;:2,&quot;district&quot;:&quot;武昌区&quot;,&quot;town&quot;:&quot;珞珈山街道&quot;,&quot;town_code&quot;:&quot;420106013&quot;,&quot;adcode&quot;:&quot;420106&quot;,&quot;street&quot;:&quot;茶港路&quot;,&quot;street_number&quot;:&quot;&quot;,&quot;direction&quot;:&quot;&quot;,&quot;distance&quot;:&quot;&quot;},&quot;pois&quot;:[],&quot;roads&quot;:[],&quot;poiRegions&quot;:[],&quot;sematic_description&quot;:&quot;&quot;,&quot;cityCode&quot;:218}} 从中获取自己感兴趣的数据就好 显示到窗口123456789def show(self, path, info): pic = QtGui.QPixmap(path) self.ui.lb_pic.setPixmap(pic) self.ui.lb_pictime.setText(\"拍摄时间：\" + str(info['Image DateTime(拍摄时间)'])) self.ui.lb_picGPS.setText(\"经纬度：\" + str(info['GPS GPSLatitudeRef(纬度标志)']) + ' ' + str(info['GPS GPSLatitude(纬度)']) + ' ' + str(info['GPS GPSLongitudeRef(经度标志)']) + ' ' + str(info['GPS GPSLongitude(经度)'])) self.ui.lb_piclocation.setText(\"位置：\" + info['地址']) 这里没什么好说的了，把图片和获取到的信息显示到窗口的label控件上就好。 测试我测试了很多张图片，其中在自己家拍摄的图片定位的非常详细，精度可以到街道号，而且我上面经纬度只取到了小数点后四位。这里还是用去年拍到的夏天武大的云为例。 结果如下图所示： 但是我接下来测试了不同设备拍摄的数据，其中HUAWEI mate20、OPPO R9s还有一些手机型号拍摄的图像是解析不到任何数据的，一加7获取了很少的内容，例如拍摄时间等，没有GPS信息（可能和相机设置有关），而且不同设备返回的exifread字典是不一样的如canon相机，这个内容太多就不放在这里了，数据格式不一样的话是需要根据具体格式来写代码的。 闲话 虽然大部分的设备都没有解析的数据，但是我的HUAWEI Nova4显示的完完整整，具体是不是设备的原因也不敢确定，还是要增加隐私意识。 这次用了百度地图API，看了看官网好像可以干的事情很多，以后想在多探索一些用法，先留下一个坑 json格式和json库也想好好的看一看，留下第二个坑","link":"/2020/05/09/exifread-%E4%BD%BF%E7%94%A8python%E8%8E%B7%E5%8F%96%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%EF%BC%88%E4%BA%8C%EF%BC%89/"},{"title":"mysql的安装与使用","text":"昨天摸鱼了么？ 摸了 今天C#布置的作业是在上次课的爬虫程序的基础上，改写数据存储和显示部分，使用数据库进行存取。大二上完数据库就把Oracle删掉了，这次从零开始的数据库安装与摸鱼。 MySQL的下载与配置Windows 上安装 MySQL 比较简单，最新版本可以在 MySQL 下载 中下载中查看。 下载完后，我们将 zip 包解压到相应的目录，这里我解压到了D:\\mysql 在该文件夹下创建my.ini编辑 my.ini 配置以下基本信息： 1234567891011121314151617[client]# 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]# 设置3306端口port = 3306# 设置mysql的安装目录basedir=C:\\\\web\\\\mysql-8.0.11# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错# datadir=C:\\\\web\\\\sqldata# 允许最大连接数max_connections=20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB ini文件的话就是新建一个文本文档另存为my.ini就好 启动数据库以管理员身份运行cmd，切换到MySQL目录下的bin文件里 初始化数据库: mysqld --initialize --console 执行完成后，会输出 root 用户的初始默认密码，就在最后显示的最后一行A temporary password is generated for root@localhost:后面的东西，建议先保存下来，我因为第一次配置出错，把cmd关掉后忘了保存初始root密码，选择了从头再来。 输入以下安装命令： mysqld install 启动输入以下命令即可： net start mysql 登录MySQL当 MySQL 服务已经运行时， 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中， 首先打开命令提示符， 输入以下格式的命名: mysql -h 主机名 -u 用户名 -p -h : 指定客户端所要登录的 MySQL 主机名， 登录本机(localhost 或 127.0.0.1)该参数可以省略; -u : 登录的用户名; -p : 告诉服务器将会使用一个密码来登录， 如果所要登录的用户名密码为空， 可以忽略此选项。 如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可： mysql -u root -p 按回车确认， 如果安装正确且 MySQL 正在运行，会让你输入密码，把刚才的初始root输入就好了。 进入后直接：SET PASSWORD = '123456'把初始密码改掉。 MySQL的使用（以C#为例）首先把题目放一下： 123编写一个网络爬虫，从一个网址中如（http://hao.360.cn）开始，获取网页内容，找到网页中的链接，做进一步下载（只要求一层）。要求：1. 使用多线程等技术，实现并行下载，并在Winform界面中，实时显示当前已下载页面的个数（要考虑多线程加锁）；2. 使用表格控件，显示已下载页面的链接，使用正则表达式，筛选下载的页面中的汉字，并统计汉字个数，并显示在表格控件中。 本次作业的要求是把这个里面的链接和文字个数储存到数据库中，并从数据库中查找和显示。 修改数据库1234567891011121314151617181920212223private void Insert(string url, int num) { String connStr = &quot;server=127.0.0.1;port=3306;user=root;password=123456; database=websites;&quot;; MySqlConnection conn = new MySqlConnection(connStr); try { conn.Open(); string sql = &quot;insert into url_num(URL,NUM) values(@URL,@NUM)&quot;; MySqlCommand cmd = new MySqlCommand(sql, conn); cmd.Prepare(); cmd.Parameters.AddWithValue(&quot;@URL&quot;, url); cmd.Parameters.AddWithValue(&quot;@NUM&quot;, num); int result = cmd.ExecuteNonQuery(); } catch (MySqlException e) { MessageBox.Show(e.Message); } finally { conn.Close(); } } 插入函数，把网址和汉字个数插入到已经建好的表里。 连接数据库具体步骤就是： 定义连接字符串 1String connStr = &quot;server=127.0.0.1;port=3306;user=root;password=123456; database=websites;&quot;; 创建Connection对象 1MySqlConnection conn = new MySqlConnection(connStr); 打开与数据库的连接 1conn.Open(); 这一步以及之后对数据库的操作最好放在try里，finally里放个conn.Close() 查询数据库1234567891011121314151617181920212223242526272829303132private void btn_show_Click_1(object sender, EventArgs e) { String connStr = &quot;server=127.0.0.1;port=3306;user=root;password=123456; database=websites;&quot;; MySqlConnection conn = new MySqlConnection(connStr); try { conn.Open(); string sql = &quot;select * from url_num&quot;; MySqlCommand cmd = new MySqlCommand(sql, conn); MySqlDataReader data = cmd.ExecuteReader(); while (data.Read()) { string url = data[&quot;URL&quot;].ToString(); string num = data[&quot;NUM&quot;].ToString(); ListViewItem item = new ListViewItem { Text = url }; item.SubItems.Add(num); lv_download.Items.Add(item); } } catch (MySqlException e1) { MessageBox.Show(e1.Message); } finally { conn.Close(); } } 其实和修改数据库大致流程一样，就是sql语句换了一下。 闲话 MySQL语句以后单开一篇说说吧，耶又是一个坑 makedown文法也要单开一篇，今天写引用格式又去查了一遍 等哪天想摸鱼了再更博客主题配置的文章","link":"/2020/05/11/mysql%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","link":"/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"pyside2","slug":"pyside2","link":"/tags/pyside2/"},{"name":"pat","slug":"pat","link":"/tags/pat/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"exifread","slug":"exifread","link":"/tags/exifread/"}],"categories":[{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"python","slug":"python","link":"/categories/python/"}]}